import PySimpleGUI as sgimport string import randomimport json#--------------------------------------------------------------------------------------------------------------------#Funcionesdef sopa():    #sopa de letras    layout = []    #creo la estructura que retorna el layout de la sopa de letras y el diccionario de palabras     retorno = []    #creo la estructura que contiene cada palabra con su tipo(vert-horiz) y con una lista donde cada elemento    #es la coordenada de cada letra de la palabra    palabras={}    with open('configuracion.json') as f:     data = json.load(f)    if data["orientacion"]=="Horizontal":      #en la matriz mxn si elige HORIZONTAL m = cantidad palabras y n = len(palabra+grande)      #m = filas       #n = columnas      m = len(data["palabras"])      n = len(data["palabras"][0])          else:      #si es vertical es al revés      m = len(data["palabras"][0])      n = len(data["palabras"])    #creo las filas del layout que representa a la sopa de letras    for i in range(m):      layout.append([])        if data["orientacion"] == "Horizontal":     #cargo en la variable azar la cantidad de palabras de la configuración      azar = []     for cant_words_h in range(m):      azar.append(cant_words_h)     #comienzo el llenado del layout de la sopa      for fila in range(m):      num_azar_h = random.choice(azar)      azar.remove(num_azar_h)      #cargo en word la palabra que se encuentra en la posicion num_azar      word = data["palabras"][num_azar_h]      #creo la estructura de las palabras como un diccionario con su color y una lista      # de las coordenadas de las letras      palabras[word] = {}      palabras[word]["color"] = 'segun pattern'      palabras[word]["coord"] = []      #num representa el indice de inicio en la fila de la palabra de forma random      num = random.randint(0,(n-len(word)))      #cargo el layout con letras random en la fila correspondiente con una cantidad num      #el primer for representa la carga de letras previas a las letras de la palabra      for col_letra_previa in range(num):       layout[fila].append(sg.T(random.choice(string.ascii_lowercase),                             size=(7,2),                             background_color='green',                             pad=(0.5,0.5),                             justification='center' ,                             click_submits=True,                             enable_events=True))      #el segundo for representa el llenado de las letras de la palabra      for col_letra_word in range(len(word)):       layout[fila].append(sg.T(word[col_letra_word],                             size=(7,2),                             background_color='green',                             pad=(0.5,0.5),                             justification='center',                             key=(fila,num+col_letra_word) ,                             click_submits=True,                             enable_events=True))       palabras[word]["coord"].append((fila,num+col_letra_word))      #el tercer for representa la carga de letras posterior a las letras de la palabra      for col_letra_posterior in range(n-len(word)-num):       layout[fila].append(sg.T(random.choice(string.ascii_lowercase),                             size=(7,2),                             background_color='green',                             pad=(0.5,0.5),                             justification='center',                             click_submits=True,                             enable_events=True))     #en layout voy cargando las filas para crear la sopa de letras     retorno.append(layout)     #en palabras voy cargando cada palabra con su color y sus coordenadasde ubicación     retorno.append(palabras)     return retorno    else:      #en la matriz mxn si elige VERTICAL m = len(palabra+grande) y n = cantidad de palabras     azar = []     for cant_words_v in range(n):      azar.append(cant_words_v)     for columna in range(n):      num_azar_v = random.choice(azar)      azar.remove(num_azar_v)      word = data["palabras"][num_azar_v]      palabras[word] = {}      palabras[word]["color"] = "segun pattern"      palabras[word]["coord"] = []      num = random.randint(0,(m-len(word)))      for fil_letra_previa in range(num):        layout[fil_letra_previa].append(sg.T(random.choice(string.ascii_lowercase),                           size=(7,2),                           background_color='green',                           pad=(0.5,0.5),                           justification='center',                            click_submits=True,                           enable_events=True))      for fil_letra_word in range(len(word)):        layout[fil_letra_word+num].append(sg.T(word[fil_letra_word], size=(7,2),                           background_color='green',                           pad=(0.5,0.5),                           justification='center',                           key=(fil_letra_word+num,columna) ,                           click_submits=True,                           enable_events=True))        palabras[word]["coord"].append((fil_letra_word+num,columna))      for fil_letra_posterior in range(num+len(word),m):        layout[fil_letra_posterior].append(sg.T(random.choice(string.ascii_lowercase),                           size=(7,2),                           background_color='green',                           pad=(0.5,0.5),                           justification='center',                           click_submits=True,                           enable_events=True))      retorno.append(layout)     retorno.append(palabras)      return layout,palabras  def jugar():    with open('configuracion.json') as f:     data = json.load(f)    retorno = sopa()    layout = retorno[0]    palabras=retorno[1]    window = sg.Window('Sopa de letras',size=(1280,720), grab_anywhere=True, font='Courier').Layout(layout)    while True:      event, values = window.Read()      if values==None:       break      continuar=True      sacar=False      for i in palabras.keys():        if event==palabras[i]["coord"][0]:         window.FindElement(event).Update(background_color='red')         x=1         while (continuar) and (x<len(i)):           event, values = window.Read()            if palabras[i]["coord"][x]==event:            window.FindElement(event).Update(background_color='red')            x=x+1           else:            continuar=False         if continuar==False:              for j in range(x):            window.FindElement(palabras[i]["coord"][j]).Update(background_color='green')          else:          sacar=True          quitar=i      if sacar:        palabras.pop(quitar)      if len(palabras)==0:         sg.PopupError("Ganaste")          exit(19)def configuracion():  with open('configuracion.json',"r+") as f:     data = json.load(f)  lay_confi=[          [sg.Text(" Configurar palabras ", relief='raised', text_color='black',background_color="white")],          [sg.Text("Ingrese una palabra", size=(20,1), relief='groove'), sg.InputText(key='input', size=(20,3))],          [sg.Listbox(values=(data["palabras"]),key="list", size=(50,3))],          [sg.Submit("Agregar"),sg.Submit("Quitar")],          [sg.InputCombo("hola")],          [sg.Submit("Guardar cambios"),sg.Cancel("Volver")],        ]  window_confi=sg.Window("Configuración",size=(570,670), font='Courier').Layout(lay_confi)    while True:   button, values = window_confi.Read()   if button=="Guardar cambios":    print("hi")    if button=="Volver"or values==None:     break      window_confi.Close()###########################################################################################Mainsg.ChangeLookAndFeel('BrownBlue')layout=[            [sg.Button("Jugar",          size=(20,3),          button_color=("white","green"),           pad=(15,10),           border_width=20)],        [sg.Button("Configuracion",          size=(20,3),          button_color=("white","green"),           pad=(15,10),           border_width=20)],        [sg.Button("Salir",          size=(20,3),          button_color=("white","green"),           pad=(15,10),           border_width=20)],        ]window = sg.Window("Juego Educativo",size=(290,375), font='Courier').Layout(layout)while True: button, values = window.Read() if button=="Jugar":    jugar() if button=="Configuracion":    configuracion() if button=="Salir"or values==None:     exit(19)    window.Close()